"use client";

import React, { useState } from "react";
import { Download, Share2, RefreshCw } from "lucide-react";
import html2canvas from "html2canvas";
import { Skeleton } from "./ui/skeleton";

const backgrounds = [
  "bg-gradient-to-tl from-indigo-900 via-indigo-400 to-indigo-900",
  "bg-gradient-to-tl from-rose-900 via-rose-400 to-rose-900",
  "bg-gradient-to-tl from-emerald-900 via-emerald-400 to-emerald-900",
  "bg-gradient-to-tl from-violet-900 via-violet-400 to-violet-900",
  "bg-gradient-to-tl from-cyan-900 via-cyan-400 to-cyan-900",
  "bg-gradient-to-tl from-amber-900 via-amber-400 to-amber-900",
  "bg-gradient-to-tl from-fuchsia-900 via-fuchsia-400 to-fuchsia-900",
  "bg-gradient-to-tl from-black via-gray-800 to-black",
];

export default function Card({
  text,
  isLoading,
  error,
  type,
}: {
  text: string;
  isLoading: boolean;
  error: string;
  type: string;
}) {
  const [currentBg, setCurrentBg] = useState(0);

  const downloadImage = async () => {
    const element = document.getElementById(`${type}-card`);
    if (element) {
      const canvas = await html2canvas(element);
      const data = canvas.toDataURL("image/png");
      const link = document.createElement("a");
      link.href = data;
      link.download = `${type}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const shareToInstagram = async () => {
    const element = document.getElementById(`${type}-card`);
    if (element) {
      const canvas = await html2canvas(element);
      const data = canvas.toDataURL("image/png");

      if (navigator.share) {
        try {
          const blob = await (await fetch(data)).blob();
          const file = new File([blob], `${type}.png`, { type: "image/png" });
          await navigator.share({
            files: [file],
            title: `Check out this ${type}!`,
            text: `Generated by the Burnsta`,
          });
        } catch (error) {
          console.error("Error sharing:", error);
        }
      }
    }
  };

  const cycleBackground = () => {
    setCurrentBg((prev) => (prev + 1) % backgrounds.length);
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-4 md:p-0">
      {/* Instagram Story Card Container */}
      <div className="w-full max-w-[450px] mb-6">
        <div className="relative" style={{ paddingTop: "177.78%" }}>
          {/* 9:16 aspect ratio */}
          <div
            id={`${type}-card`}
            className={`absolute top-0 left-0 w-full h-full ${backgrounds[currentBg]} overflow-hidden rounded-lg`}
          >
            {isLoading ? (
              <div className="w-full max-w-[450px] mb-6">
                <div className="relative" style={{ paddingTop: "177.78%" }}>
                  <div className="absolute top-0 left-0 w-full h-full">
                    <Skeleton
                      className={`w-full h-full ${backgrounds[currentBg]}`}
                    />
                  </div>
                </div>
              </div>
            ) : error ? (
              <div className="relative h-full flex flex-col justify-center items-center p-8 text-white">
                <div className="bg-black/30 backdrop-blur-sm p-5 rounded-3xl flex flex-col items-center">
                  <p className="text-lg font-semibold">User not found ðŸ˜¥</p>
                </div>
              </div>
            ) : (
              <div className="relative h-full flex flex-col justify-center p-8 text-white">
                <div className="bg-black/30 backdrop-blur-sm p-8 rounded-3xl flex flex-col items-center">
                  <div className="w-20 h-20 bg-gradient-to-br from-white/20 to-white/5 rounded-full flex items-center justify-center mb-6">
                    <span className="text-4xl">ðŸ”¥</span>
                  </div>
                  <p className="text-lg font-semibold leading-tight text-justify">
                    {text.split(" ").map((word, index) =>
                      word.startsWith("*") && word.endsWith("*") ? (
                        <span key={index} className="font-extrabold">
                          {word.slice(1, -1)}{" "}
                        </span>
                      ) : (
                        <span key={index}>{word} </span>
                      )
                    )}
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Controls */}
      <div className="flex flex-wrap justify-center gap-4">
        <button
          onClick={cycleBackground}
          className="flex items-center gap-2 px-6 py-3 bg-black/10 hover:bg-black/20 rounded-full text-black transition-all duration-300 hover:scale-105 dark:bg-white/10 dark:hover:bg-white/20 dark:text-white"
        >
          <RefreshCw size={20} />
          <span>Change Style</span>
        </button>
        <button
          onClick={downloadImage}
          className="flex items-center gap-2 px-6 py-3 bg-black/10 hover:bg-black/20 rounded-full text-black transition-all duration-300 hover:scale-105 dark:bg-white/10 dark:hover:bg-white/20 dark:text-white"
        >
          <Download size={20} />
          <span>Download</span>
        </button>
        <button
          onClick={shareToInstagram}
          className="flex items-center gap-2 px-6 py-3 bg-black/10 hover:bg-black/20 rounded-full text-black transition-all duration-300 hover:scale-105 dark:bg-white/10 dark:hover:bg-white/20 dark:text-white"
        >
          <Share2 size={20} />
          <span>Share</span>
        </button>
      </div>
    </div>
  );
}
